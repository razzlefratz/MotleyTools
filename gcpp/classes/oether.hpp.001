/*====================================================================*
 *
 *   Copyright (c) 2015, Qualcomm Atheros Communications Inc.
 *
 *   Permission to use, copy, modify, and/or distribute this software
 *   for any purpose with or without fee is hereby granted, provided
 *   that the above copyright notice and this permission notice appear
 *   in all copies.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 *   WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 *   THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
 *   CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 *   LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 *   NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 *   CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *--------------------------------------------------------------------*/

#ifndef ETHER_HEADER
#define ETHER_HEADER

/*====================================================================*
 *  system header files;
 *--------------------------------------------------------------------*/

#include <Arduino.h>

/*====================================================================*
 *  custom header files;
 *--------------------------------------------------------------------*/

/*====================================================================*
 *  define class macros;
 *--------------------------------------------------------------------*/

#define htons(x) (((x) << 8 & 0xFF00) | ((x) >> 8 & 0x00FF))
#define ntohs(x) htons(x)
#define htonl(x) (((x) << 24 & 0xFF000000UL) | \
                  ((x) <<  8 & 0x00FF0000UL) | \
                  ((x) >>  8 & 0x0000FF00UL) | \
                  ((x) >> 24 & 0x000000FFUL))
#define ntohl(x) htonl(x)

/*====================================================================*
 *  declare class data types;
 *--------------------------------------------------------------------*/

typedef struct ether

{
	struct 
	{
		byte oda [6];
		byte osa [6];
                uint16_t type;
	}
	header;
	byte body [1500];
}

ether;

/*====================================================================*
 *  declare class interface;
 *--------------------------------------------------------------------*/

class EtherClass

{
public: 
	~ EtherClass ();
	static void showFrame (byte * memory, unsigned extent);
	static char const * etherProtocol (uint16_t ethertype);
private: 
};

#endif



