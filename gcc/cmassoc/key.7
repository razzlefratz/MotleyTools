.TH key 7 "December 2012" "plc-utils-2.1.3" "Qualcomm Atheros Powerline Toolkit"
.SH NAME
key - Random Key Generator
.SH SYNOPSIS
.BR key 
.RI [ options ] 
.SH DESCRIPTION
Dynamically generate distinct SHA256 keys.
A different key is printed on stdout with each program invocation or iteration, unless this is suppressed.
Key computation is seeded using a 64 ASCII character string stored in a user created seedfile.
The program automatically increments the seedfile string to preserve continuity and uniqueness across program invocations, program iterations, console sessions, host reboots and production sites.
.SH OPTIONS
.TP
-\fBf \fIfilename\fR
The seed filename.
The default seed filename is "\fBseedfile.txt\fR".
.TP
-\fBn \fIcount\fR
The number of keys to generate and print.
This program prints the specified number of distinct keys of the specified type, one key per line.
Normally, program output is directed to a file or a pipe when this option is used.
It is useful for creating a file of random keys.
.TP
-\fBo\fR
Use the \fBold\fR seedfile string.
This option prevents the seedfile string from being incremented before a \fBnew\fR key is computed.
This feature allows additional key types to be computed from the same seedfile string.
.TP
.RB - q
Enable quiet mode which, for this application, has no effect.
.TP
.RB - v
Enable verbose mode which, for this application, prints the pass phrase for each key.
.TP
.RB - ? ,-- help
Print program help summary on stdout.
This option takes precedence over other options on the command line.

.TP
.RB - ! ,-- version
Print program version information on stdout.
This option takes precedence over other options on the command line.

.SH EXAMPLES
The following example shows how to create a seedfile.
The seedfile acts as the seed for the SHA256 algorithm.
The seed is then salted (modified) differently for each type of key generated by this program.
The seedfile string is then incremented and re-written.
Initially, the seedfile must contain at least one character or an error will occur.
.PP
   # echo "My Company Name, Inc." > secret.key
.PP
The following example prints a SHA256 key on stdout.
An SHA256 key is 256 bits or 32 bytes expressed as 64 hexadecimal digits.
An SHA256 key is the default output when no key type is specified.
SHA256 is a public domain standard.

.PP
   # key -f secret.key
   BFF0F6E3C83CE13829EA7F1F6D25042F4B05052E44C0B801EEA7CD6317F3622E
.PP
The following command prints a new key on stdout using the seedfile \fBsecret.key\fR as the seed.
The key will be different each time this program is executed because the seedfile string is incremented each time.
.PP
   # key -f secret.key
   685C3EB4D5F30B4B2DB3EE2378B7B1D586A4F9DE41232BF864FE2DEAFA5B5091
.PP
To observe the seedfile string, use option \fB-v\fR.
Notice that the seedfile string is 64 characters long and that spaces are significant.
The key shown here has been abbreviated to prevent formatting errors.
.PP
   # key -f secret.key -v
   82A086EE46F...8D815FC1B5672 My Company Name, Inc.
!*:
.PP
The following command prints 10 random keys on stdout.
Program output could have been directed to a file or a pipe for futther processing such as extracting a substring to obtain a shorter key.

.PP
   # key -f secret.key -n 10
   780AC153CD47AB01520B5B0246DE7B78584C0413393EDA4430773DED80DDF01A
   C7FF68DB206B1E98B8752CC95296692D45AB3DFA418F5CF5DD13479836FEDD4E
   127C8E27F4C8AC7DB27EC8F977968F64D950830B8D511B798FA5A20BE807A7E1
   79E00DBD57A0E22DCEE2C9CF29F3B7DBA95137BEDC8C76EBE3C32BFFA653D136
   AC9B8DA1B480EF0ECD7A734383DC1B0F3886D0959BAE77F30F1F16C069D2FE4A
   B1F57B211EE774B506106DEC90B7D18FE0328377FCFD9A4D523B632DFAEFF87A
   B1C1C746BDC3E45EBE65FC8D5C15D68F41E9981757024A25A4C3261A154BE6F2
   06E6CCEA8C919162D22CE2ADCB2DDFBDCBB876631CE73F48525EC27E435934E9
   F26C0636C6B2D51956D04AD73DE03BE6D112661040CB23DD74922C6E05EC7E6B
   A62219B0BBABA1DBC444574D0D73A52954847E6DB2BE44441C73E12B9F8EA6E7
.PP
This utterly useless example demonstrates how to generate 10 identical keys by suppressing the normal string increment between each key computation.
.PP
   # key -on 10 -f secret.key
   7E7A10DF5DCAE9D02CBE71C6BD7C8342C33BBA71DE1116CD1B84B11986DF2A13
   7E7A10DF5DCAE9D02CBE71C6BD7C8342C33BBA71DE1116CD1B84B11986DF2A13
   7E7A10DF5DCAE9D02CBE71C6BD7C8342C33BBA71DE1116CD1B84B11986DF2A13
   7E7A10DF5DCAE9D02CBE71C6BD7C8342C33BBA71DE1116CD1B84B11986DF2A13
   7E7A10DF5DCAE9D02CBE71C6BD7C8342C33BBA71DE1116CD1B84B11986DF2A13
   7E7A10DF5DCAE9D02CBE71C6BD7C8342C33BBA71DE1116CD1B84B11986DF2A13
   7E7A10DF5DCAE9D02CBE71C6BD7C8342C33BBA71DE1116CD1B84B11986DF2A13
   7E7A10DF5DCAE9D02CBE71C6BD7C8342C33BBA71DE1116CD1B84B11986DF2A13
   7E7A10DF5DCAE9D02CBE71C6BD7C8342C33BBA71DE1116CD1B84B11986DF2A13
   7E7A10DF5DCAE9D02CBE71C6BD7C8342C33BBA71DE1116CD1B84B11986DF2A13
.SH RECOMMENDATIONS
The seed file is critical to the continuity and uniqueness of generated keys.
The 64 character string stored in the seedfile is incremented, character by character, right to left, with each file access unless that behavior is suppressed using the \fB-o\fR option.
The SHA256 algorithm generates radially different output given minor changes in this string.
The key space is huge and the probability of collision is statistically small.
.PP
Be aware that two seedfiles containing the same start string will generate the same key sequence.
To minimize the chance of duplicate key values across production lines, each production line should use seedfiles having different start strings.
The length of the start string is not important but it should be different for each production line.
If a seedfile is lost, merely replace it with another one, as though you are opening another production line.
.PP
Mathematically, the shorter the start string the longer it will take for two different seedfiles to coincidentally produce identical output.
From 12 to 24 character is a reasonable length but this is not a restriction.
If you have several production lines, you may want to maintain a record of the start strings used on each line in case a new seedfile must be created.
.SH REFERENCES
See FIPS180-2 sec 5.3.2 for information on SHA256 encoding.
.SH SEE ALSO
None.
.SH CREDITS
 Charles Maier <cmaier@cmassoc.net>
