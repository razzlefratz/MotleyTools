<chapter id='oflagword'>
	<title>
		Class oflagword
		</title>
	<section id="oflagword-class" >
		<title>
			Introduction
			</title>
		<para>
			A generic bit-mapped state variable.
			</para>
		<para>
			This class is declared in <ulink url='oflagword.hpp.html'>oflagword.hpp</ulink> and defined in <ulink url='oflagword.cpp.html'>oflagword.cpp</ulink>.
			</para>
		<section id="oflagword-inheritance">
			<title>
				Inheritance
				</title>
			<para>
				None.
				</para>
			</section>
		<section id="oflagword-dependence">
			<title>
				Dependence
				</title>
			<para>
				None.
				</para>
			</section>
		</section>
	<section id='oflagword-properties'>
		<title>
			Properties
			</title>
		<para>
			None.
			</para>
		</section>
	<section id="oflagword-methods">
		<title>
			Methods
			</title>
		<section id="oflagword-allclear">
			<title>
				allclear
				</title>
			<funcsynopsis>
				<funcprototype>
  					<funcdef>bool <function>allclear</function></funcdef>
    					<paramdef>unsigned <parameter>bits</parameter></paramdef> 
					</funcprototype>
				</funcsynopsis>
			<para>
				Return <constant>true</constant> if the logical product of the flagword and <varname>bits</varname> argument is <constant>0</constant>. This indicates that the flagword has no bits of interest set.
				</para>
			</section>
		<section id="oflagword-allset">
			<title>
				allset
				</title>
			<funcsynopsis>
				<funcprototype>
  					<funcdef>bool <function>allset</function></funcdef>
    					<paramdef>unsigned <parameter>bits</parameter></paramdef> 
					</funcprototype>
				</funcsynopsis>
			<para>
				Return <constant>true</constant> if the logical product of the flagword and <varname>bits</varname> argument matches the <varname>bits</varname> argument. This indicates that the flagword has all bits of interest set.
				</para>
			</section>
		<section id="oflagword-anyclear">
			<title>
				anyclear
				</title>
			<funcsynopsis>
				<funcprototype>
  					<funcdef>bool <function>anyclear</function></funcdef>
    					<paramdef>unsigned <parameter>bits</parameter></paramdef> 
					</funcprototype>
				</funcsynopsis>
			<para>
				Return <constant>true</constant> if the logical product of the flagword and <varname>bits</varname> argument does not match the <varname>bits</varname> argument. This indicates that the flagword has some, or possibly all, bits of interest clear.
				</para>
			</section>
		<section id="oflagword-anyset">
			<title>
				anyset
				</title>
			<funcsynopsis>
				<funcprototype>
  					<funcdef>bool <function>anyset</function></funcdef>
    					<paramdef>unsigned <parameter>bits</parameter></paramdef> 
					</funcprototype>
				</funcsynopsis>
			<para>
				Return <constant>true</constant> if the logical product of the flagword and <varname>bits</varname> argument is not <constant>0</constant>. This indicates that the flagword has some, or possibly all, bits of interest set.
				</para>
			</section>
		<section id="oflagword-clearbits">
			<title>
				clearbits
				</title>
			<funcsynopsis>
				<funcprototype>
  					<funcdef>oflagword &amp; <function>clearbits</function></funcdef>
    					<paramdef>unsigned <parameter>bits</parameter></paramdef> 
					</funcprototype>
				</funcsynopsis>
			<para>
				Clear selected flagword bits. Argument <varname>bits</varname> indicates which bits to clear. The flagword becomes the logical sum of the flagword and argument <varname>bits</varname>.  
				</para>
			</section>
		<section id="oflagword-getbits">
			<title>
				getbits
				</title>
			<funcsynopsis>
				<funcprototype>
  					<funcdef>unsigned <function>getbits</function></funcdef>
    					<paramdef>unsigned <parameter>bits</parameter></paramdef> 
					</funcprototype>
				</funcsynopsis>
			<para>
				Return selected flagword bits. Argument <varname>bits</varname> indicates which bits to return. The return value is the logical product of the flagword and argument <varname>bits</varname>.
				</para>
			</section>
		<section id="oflagword-getword">
			<title>
				getword
				</title>
			<funcsynopsis>
				<funcprototype>
  					<funcdef>unsigned <function>getword</function></funcdef>
    					<paramdef>void</paramdef> 
					</funcprototype>
				</funcsynopsis>
			<para>
				Return the flagword as an unsigned integer. This is equivalent to <quote><function>getbits</function> (<constant>-1</constant>)</quote>.
				</para>
			</section>
		<section id="oflagword-setbits">
			<title>
				setbits
				</title>
			<funcsynopsis>
				<funcprototype>
  					<funcdef>oflagword &amp; <function>setbits</function></funcdef>
    					<paramdef>unsigned <parameter>bits</parameter></paramdef> 
					</funcprototype>
				</funcsynopsis>
			<para>
				Set selected flagword bits. Argument <varname>bits</varname> indicates which bits to set. The flagword becomes the logical product of the flagword and argument <varname>bits</varname>.  
				</para>
			</section>
		<section id="oflagword-setword">
			<title>
				setword
				</title>
			<funcsynopsis>
				<funcprototype>
  					<funcdef>oflagword &amp; <function>setword</function></funcdef>
    					<paramdef>unsigned <parameter>bits</parameter></paramdef> 
					</funcprototype>
				</funcsynopsis>
			<para>
				Replace flagword with argument <varname>bits</varname>.
				</para>
			</section>
		</section>
	<section id="oflagword-constructors">
		<title>
			Constructors
			</title>
		<funcsynopsis>
			<funcprototype>
  				<funcdef><function>oflagword</function></funcdef>
    				<paramdef>void</paramdef> 
				</funcprototype>
			</funcsynopsis>
		<para>
			Initialize flagword to <constant>0</constant>.
			</para>
		<funcsynopsis>
			<funcprototype>
  				<funcdef><function>oflagword</function></funcdef>
    				<paramdef>unsigned <parameter>bits</parameter></paramdef> 
				</funcprototype>
			</funcsynopsis>
		<para>
			Initialize flagword to <varname>bits</varname>.
			</para>
		</section>
	</chapter>
